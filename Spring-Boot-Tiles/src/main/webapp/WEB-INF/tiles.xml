<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tiles-definitions PUBLIC
       "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"
       "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">

<tiles-definitions>
	<!--welcome page -->
	<definition name="welcome" template="/WEB-INF/jsp/welcome.jsp">
		<put-attribute name="title"
			value="This Is TilesFramework Integrated With Spring Boot" />
		<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="/WEB-INF/jsp/body.jsp"></put-attribute>
		<put-attribute name="menu" value="/WEB-INF/jsp/menu.jsp"></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>
	</definition>
	<!--home page -->
	<definition name="home" extends="welcome">
		<put-attribute name="title" value="This Is Home Page"></put-attribute>
		<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="A programming language is a formal language, which comprises a set of instructions that produce various kinds of output. Programming languages are used in computer programming to implement algorithms.

Most programming languages consist of instructions for computers. There are programmable machines that use a set of specific instructions, rather than general programming languages. Early ones preceded the invention of the digital computer, the first probably being the automatic flute player described in the 9th century by the brothers Musa in Baghdad, during the Islamic Golden Age.[1] Since the early 1800s, programs have been used to direct the behavior of machines such as Jacquard looms, music boxes and player pianos.[2] The programs for these machines (such as a player piano's scrolls) did not produce different behavior in response to different inputs or conditions.

Thousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an imperative form (i.e., as a sequence of operations to perform) while other languages use the declarative form (i.e. the desired result is specified, not how to achieve it).

The description of a programming language is usually split into the two components of syntax (form) and semantics (meaning). Some languages are defined by a specification document (for example, the C programming language is specified by an ISO Standard) while other languages (such as Perl) have a dominant implementation that is treated as a reference. Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>
	</definition>

	<!-- contact page -->
	<definition name="contact" extends="welcome">
		<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Reach Us

       Unit No. 414, Creative Industrial Estate, N. M. Joshi Marg Lower Parel (East), Lower Parel,
Mumbai-400011, Maharashtra, India"></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>
	</definition>


<!--java Page  -->	
<definition name="java" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Java is a programming language and a platform. Java is a high level, robust, object-oriented and secure programming language.

Java was developed by Sun Microsystems (which is now the subsidiary of Oracle) in the year 1995. James Gosling is known as the father of Java. Before Java, its name was Oak. Since Oak was already a registered company, so James Gosling and his team changed the Oak name to Java."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>
</definition>

<!-- featureOfJava -->
<definition name="featureOfJava" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).

Servlet technology is robust and scalable because of java language. Before Servlet, CGI (Common Gateway Interface) scripting language was common as a server-side programming language. However, there were many disadvantages to this technology. We have discussed these disadvantages below.

There are many interfaces and classes in the Servlet API such as Servlet, GenericServlet, HttpServlet, ServletRequest, ServletResponse, etc."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>

<!--jsp  -->

<definition name="whtjsp" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="JSP technology is used to create web application just like Servlet technology. It can be thought of as an extension to Servlet because it provides more functionality than servlet such as expression language, JSTL, etc.

A JSP page consists of HTML tags and JSP tags. The JSP pages are easier to maintain than Servlet because we can separate designing and development. It provides some additional features such as Expression Language, Custom Tags, etc."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>


<!--Hibernate  -->
<definition name="whtHiberNate" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Hibernate is a Java framework that simplifies the development of Java application to interact with the database. It is an open source, lightweight, ORM (Object Relational Mapping) tool. Hibernate implements the specifications of JPA (Java Persistence API) for data persistence.."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>


<!-- Spring FrameWork -->
<definition name="whtSpring" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Spring is a lightweight framework. It can be thought of as a framework of frameworks because it provides support to various frameworks such as Struts, Hibernate, Tapestry, EJB, JSF, etc. The framework, in broader sense, can be defined as a structure where we find solution of the various technical problems"></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>

<!-- Spring Boot -->
<definition name="whtSpringBoot" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, and run both simple and web-based applications.

It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework. It is used to create a stand-alone Spring-based application that you can just run because it needs minimal Spring configuration."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>



<!--Spring Data Jpa  -->
<definition name="whtSpringDataJPA" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Spring Boot JPA is a Java specification for managing relational data in Java applications. It allows us to access and persist data between Java object/ class and relational database. JPA follows Object-Relation Mapping (ORM). It is a set of interfaces. It also provides a runtime EntityManager API for processing queries and transactions on the objects against the database. It uses a platform-independent object-oriented query language JPQL (Java Persistent Query Language)."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>


<!--  Spring Cloud-->
<definition name="whtSpringCloud" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Spring Cloud is a framework for building robust cloud applications. Spring Cloud provides a solution to the commonly encountered patterns when developing a distributed system."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>


<!--Micro -Services  -->
<definition name="whtMicroServices" extends="welcome">
<put-attribute name="header" value="/WEB-INF/jsp/header.jsp"></put-attribute>
		<put-attribute name="body" value="Microservice Architecture is a Service Oriented Architecture. In the microservice architecture, there are a large number of microservices. By combining all the microservices, it constructs a big service. In the microservice architecture, all the services communicate with each other.

In the Microservices tutorial, we will understand how to implement microservices using Spring Cloud. We will learn how to establish communication between microservices, enable load balancing, scaling up and down of microservices. We will also learn to centralize the configuration of microservices with Spring Cloud Config Server. We will implement Eureka Naming Server and Distributed tracing with Spring Cloud Sleuth and Zipkin. We will create fault tolerance microservices with Zipkin."></put-attribute>
		<put-attribute name="footer" value="/WEB-INF/jsp/footer.jsp"></put-attribute>

</definition>


</tiles-definitions>